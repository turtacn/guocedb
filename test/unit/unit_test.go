// Package unit contains unit tests for the guocedb project.
package unit

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/turtacn/guocedb/security/crypto"
)

// TestHashPassword tests the password hashing and checking functions.
func TestHashPassword(t *testing.T) {
	password := "my-secret-password"

	// Test hashing
	hashedPassword, err := crypto.HashPassword(password)
	assert.NoError(t, err, "Hashing password should not produce an error")
	assert.NotEmpty(t, hashedPassword, "Hashed password should not be empty")
	assert.NotEqual(t, password, hashedPassword, "Hashed password should not be the same as the original")

	// Test correct password
	assert.True(t, crypto.CheckPasswordHash(password, hashedPassword), "Correct password should pass check")

	// Test incorrect password
	assert.False(t, crypto.CheckPasswordHash("wrong-password", hashedPassword), "Incorrect password should fail check")
}

// TestGenerateRandomBytes tests the random byte generation.
func TestGenerateRandomBytes(t *testing.T) {
	length := 32
	bytes, err := crypto.GenerateRandomBytes(length)
	assert.NoError(t, err, "Generating random bytes should not produce an error")
	assert.Len(t, bytes, length, "Generated bytes should have the correct length")

	// Check that two generations are not the same
	bytes2, err := crypto.GenerateRandomBytes(length)
	assert.NoError(t, err)
	assert.NotEqual(t, bytes, bytes2, "Two separate generations of random bytes should not be equal")
}

// BenchmarkHashPassword benchmarks the password hashing function.
func BenchmarkHashPassword(b *testing.B) {
	password := "benchmark-password"
	for i := 0; i < b.N; i++ {
		_, _ = crypto.HashPassword(password)
	}
}

// Helper function to create a temporary directory for testing.
func createTempDir(t *testing.T) (string, func()) {
	t.Helper()
	dir, err := os.MkdirTemp("", "guocedb_test")
	assert.NoError(t, err)
	cleanup := func() {
		os.RemoveAll(dir)
	}
	return dir, cleanup
}
