// Package rest provides a RESTful API gateway for the gRPC management service.
package rest

import (
	"context"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/turtacn/guocedb/common/log"
	// This import would be the generated protobuf code
	// mgmtv1 "github.com/turtacn/guocedb/api/protobuf/mgmt/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// Server is the REST API server.
type Server struct {
	httpServer *http.Server
}

// NewServer creates a new REST API server.
func NewServer(grpcAddr, httpAddr string) (*Server, error) {
	ctx := context.Background()
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	// Create a gRPC client connection to the management service
	opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}

	// Create the gRPC-Gateway mux
	mux := runtime.NewServeMux()

	// This is where you would register the gRPC service handler.
	// This function is generated by protoc-gen-grpc-gateway.
	// err := mgmtv1.RegisterManagementServiceHandlerFromEndpoint(ctx, mux, grpcAddr, opts)
	// if err != nil {
	// 	return nil, err
	// }

	// Create the HTTP server
	httpServer := &http.Server{
		Addr:    httpAddr,
		Handler: mux,
	}

	return &Server{httpServer: httpServer}, nil
}

// Start starts the REST API server.
func (s *Server) Start() {
	log.GetLogger().Infof("Starting REST API gateway on %s", s.httpServer.Addr)
	go func() {
		if err := s.httpServer.ListenAndServe(); err != http.ErrServerClosed {
			log.GetLogger().Fatalf("REST API gateway failed: %v", err)
		}
	}()
}

// Close gracefully shuts down the server.
func (s *Server) Close() error {
	log.GetLogger().Info("Shutting down REST API gateway...")
	return s.httpServer.Shutdown(context.Background())
}

// generateOpenAPIDefinition is a placeholder for generating OpenAPI specs.
func generateOpenAPIDefinition() {
	// The OpenAPI v2 definitions can also be generated by protoc.
}
